import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import i18next from "i18next";

// Import a font that supports Arabic characters
import amiriRegular from "@/assets/fonts/Amiri/Amiri-Regular.ttf";

interface WalletData {
  totalAmount: number;
  totalDeductionAmount: number;
  dueAmount: number;
  balanceDetails: {
    balanceId: number;
    totalAmount: number;
    deductionPrs: number;
    deductionAmount: number;
    dueAmount: number;
  }[];
}

const translations = {
  en: {
    walletSummary: "Wallet Summary",
    totalBalance: "Total Balance",
    netBalance: "Net Balance",
    outstandingAmount: "Outstanding Amount",
    id: "ID",
    grossBalance: "Gross Balance",
    deductionPercentage: "Deduction %",
    deductionAmount: "Deduction Amount",
    netDue: "Net Due",
    page: "Page",
    of: "of",
    generatedBy: "Generated by DWash",
  },
  ar: {
    walletSummary: "ملخص المحفظة",
    totalBalance: "الرصيد الإجمالي",
    netBalance: "الرصيد الصافي",
    outstandingAmount: "المبلغ المستحق",
    id: "المعرف",
    grossBalance: "الرصيد الإجمالي",
    deductionPercentage: "نسبة الخصم",
    deductionAmount: "مبلغ الخصم",
    netDue: "المستحق الصافي",
    page: "صفحة",
    of: "من",
    generatedBy: "تم إنشاؤه بواسطة DWash",
  },
};

export const downloadPDF = (data: WalletData, filename: string) => {
  const lang = i18next.language;
  const t = (key: string) =>
    translations[lang as keyof typeof translations][
      key as keyof (typeof translations)["en"]
    ];
  const isRTL = lang === "ar";

  const doc = new jsPDF({
    orientation: "portrait",
    unit: "mm",
    format: "a4",
    putOnlyUsedFonts: true,
  });

  // Add the Arabic font
  doc.addFont(amiriRegular, "Amiri", "normal");
  doc.setFont("Amiri");

  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;

  // Add title
  doc.setFontSize(20);
  doc.text(t("walletSummary"), pageWidth / 2, 15, {
    align: "center",
  });

  // Add summary information
  doc.setFontSize(12);
  const summaryX = isRTL ? pageWidth - 20 : 20;
  const summaryAlign = isRTL ? "right" : "left";
  doc.text(
    `${t("totalBalance")}: ${data.totalDeductionAmount.toFixed(2)}`,
    summaryX,
    30,
    { align: summaryAlign }
  );
  doc.text(`${t("netBalance")}: ${data.totalAmount.toFixed(2)}`, summaryX, 40, {
    align: summaryAlign,
  });
  doc.text(
    `${t("outstandingAmount")}: ${data.dueAmount.toFixed(2)}`,
    summaryX,
    50,
    { align: summaryAlign }
  );

  // Add transactions table
  autoTable(doc, {
    startY: 60,
    head: [
      [
        t("id"),
        t("grossBalance"),
        t("deductionPercentage"),
        t("deductionAmount"),
        t("netDue"),
      ],
    ],
    body: data.balanceDetails.map((detail) => [
      detail.balanceId,
      `$${detail.totalAmount.toFixed(2)}`,
      `${detail.deductionPrs}%`,
      `$${detail.deductionAmount.toFixed(2)}`,
      `$${detail.dueAmount.toFixed(2)}`,
    ]),
    styles: { font: "Amiri", fontSize: 10 },
    headStyles: { fillColor: [41, 128, 185], textColor: 255 },
    alternateRowStyles: { fillColor: [245, 245, 245] },
    tableWidth: "auto",
    margin: { top: 60, right: 20, bottom: 40, left: 20 },
  });

  // Add footer
  const pageCount = doc.getNumberOfPages();
  doc.setFontSize(10);
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    const pageInfo = `${t("page")} ${i} ${t("of")} ${pageCount}`;
    doc.text(pageInfo, pageWidth / 2, pageHeight - 20, { align: "center" });
    doc.text(t("generatedBy"), pageWidth / 2, pageHeight - 10, {
      align: "center",
    });
  }

  doc.save(`${filename}.pdf`);
};
